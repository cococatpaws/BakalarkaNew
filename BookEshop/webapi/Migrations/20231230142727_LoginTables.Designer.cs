// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webapi.Data;

#nullable disable

namespace webapi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231230142727_LoginTables")]
    partial class LoginTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("webapi.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_address");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("address_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("country");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("postcode");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("street");

                    b.HasKey("AddressId");

                    b.ToTable("address");
                });

            modelBuilder.Entity("webapi.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_author");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.HasKey("AuthorId");

                    b.ToTable("author");
                });

            modelBuilder.Entity("webapi.Models.BillingAddress", b =>
                {
                    b.Property<int>("BillingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_billing_address");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingAddressId"));

                    b.Property<int>("AddressIdB")
                        .HasColumnType("int")
                        .HasColumnName("id_address");

                    b.HasKey("BillingAddressId");

                    b.HasIndex("AddressIdB")
                        .IsUnique();

                    b.ToTable("billing_address");
                });

            modelBuilder.Entity("webapi.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_book");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookFormat")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("book_format");

                    b.Property<string>("BookLanguage")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("book_language");

                    b.Property<string>("CoverImageURL")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("cover_image_url");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Genre")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("genre");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("int")
                        .HasColumnName("number_of_pages");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("publication_date");

                    b.Property<string>("Publisher")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("publisher");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int")
                        .HasColumnName("quantity_in_stock");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("title");

                    b.HasKey("BookId");

                    b.ToTable("book");
                });

            modelBuilder.Entity("webapi.Models.Book_Author", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorOrder")
                        .HasColumnType("int")
                        .HasColumnName("author_order");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("books_authors");
                });

            modelBuilder.Entity("webapi.Models.PersonalInfo", b =>
                {
                    b.Property<int>("PersonalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_personal_info");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalInfoId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("surname");

                    b.HasKey("PersonalInfoId");

                    b.ToTable("personal_info");
                });

            modelBuilder.Entity("webapi.Models.ShippingAddress", b =>
                {
                    b.Property<int>("ShippingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_shipping_address");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingAddressId"));

                    b.Property<int>("AddressIdS")
                        .HasColumnType("int")
                        .HasColumnName("id_address");

                    b.Property<string>("ShippingDetails")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("shipping_details");

                    b.HasKey("ShippingAddressId");

                    b.HasIndex("AddressIdS")
                        .IsUnique();

                    b.ToTable("shipping_address");
                });

            modelBuilder.Entity("webapi.Models.TemporaryUser", b =>
                {
                    b.Property<int>("UserTypeIdTempUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user_type");

                    b.Property<int>("PersonalInfoIdTempUser")
                        .HasColumnType("int")
                        .HasColumnName("id_personal_info");

                    b.HasKey("UserTypeIdTempUser");

                    b.HasIndex("PersonalInfoIdTempUser")
                        .IsUnique();

                    b.ToTable("temporary_user");
                });

            modelBuilder.Entity("webapi.Models.User", b =>
                {
                    b.Property<int>("UserTypeIdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user_type");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<int>("PersonalInfoIdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_personal_info");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("role");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserTypeIdUser");

                    b.HasIndex("PersonalInfoIdUser")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("webapi.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_user_type");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<int>("BillingAddressIdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_billing_address");

                    b.Property<int>("ShippingAddressIdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_shipping_adress");

                    b.HasKey("UserTypeId");

                    b.HasIndex("BillingAddressIdUser")
                        .IsUnique();

                    b.HasIndex("ShippingAddressIdUser")
                        .IsUnique();

                    b.ToTable("user_type");
                });

            modelBuilder.Entity("webapi.Models.BillingAddress", b =>
                {
                    b.HasOne("webapi.Models.Address", "Address")
                        .WithOne()
                        .HasForeignKey("webapi.Models.BillingAddress", "AddressIdB")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("webapi.Models.Book_Author", b =>
                {
                    b.HasOne("webapi.Models.Author", "Author")
                        .WithMany("Books_Authors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webapi.Models.Book", "Book")
                        .WithMany("BooksAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("webapi.Models.ShippingAddress", b =>
                {
                    b.HasOne("webapi.Models.Address", "Address")
                        .WithOne()
                        .HasForeignKey("webapi.Models.ShippingAddress", "AddressIdS")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("webapi.Models.TemporaryUser", b =>
                {
                    b.HasOne("webapi.Models.PersonalInfo", "PersonalInfo")
                        .WithOne()
                        .HasForeignKey("webapi.Models.TemporaryUser", "PersonalInfoIdTempUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("webapi.Models.UserType", "UserType")
                        .WithOne()
                        .HasForeignKey("webapi.Models.TemporaryUser", "UserTypeIdTempUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalInfo");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("webapi.Models.User", b =>
                {
                    b.HasOne("webapi.Models.PersonalInfo", "PersonalInfo")
                        .WithOne()
                        .HasForeignKey("webapi.Models.User", "PersonalInfoIdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("webapi.Models.UserType", "UserType")
                        .WithOne()
                        .HasForeignKey("webapi.Models.User", "UserTypeIdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PersonalInfo");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("webapi.Models.UserType", b =>
                {
                    b.HasOne("webapi.Models.BillingAddress", "BillingAddress")
                        .WithOne()
                        .HasForeignKey("webapi.Models.UserType", "BillingAddressIdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("webapi.Models.ShippingAddress", "ShippingAddress")
                        .WithOne()
                        .HasForeignKey("webapi.Models.UserType", "ShippingAddressIdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("webapi.Models.Author", b =>
                {
                    b.Navigation("Books_Authors");
                });

            modelBuilder.Entity("webapi.Models.Book", b =>
                {
                    b.Navigation("BooksAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
